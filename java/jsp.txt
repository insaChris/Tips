JSP
---------------------------------------------

Los ficheros jsp se compilan y ocnvierten en servlets la primera vez que son invocados. Se ejecutaré el servlet generado.

El servlet generado se puede encontrar en el directorio worl de tomcat.
En el caso de estar usando eclipse es directorio está en : C:\Java-JEE\eclipse\mars\work_NOTIS_EVO\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\work

En eclipse se crean dentro de WebContent, en caso de maven en webapp.

El código Java dentro de una jsp se enmarca de varias maneras (aunque se considera una mala práctica):
<%= expresión %> El resultado de evaluar la expresión se inserta en la página HTML
<% código %> Un scriptlet -> El código se insertará en el método de servicio del servlet
<%! declaraciones %> Las declaraciones se insertan en la clase, no en un método (para declarar variables de clase). Si se edclaran dentro de <% %> serán variables locales
<%-- Comentario --%> Comentario JSP

---------------------------------------------
Objetos predefinidos en una JSP
---------------------------------------------
request -> Objeto HttpServletRequest que permite acceder a la información de la solicitud
response -> Objeto HttpServletResponse para generar la respuesta
session -> Objeto HttpSession asociado a la petición (Si no hubiera sesión será null)
out -> Objeto JspWriter (similar a un PrintWriter) para generar la salida para el cliente
application -> El objeto ServletContext del contenedor web
config -> Objeto ServletConfig
pageContext -> Objeto PageContext
page -> Object
exception -> Throwable

---------------------------------------------
DIRECTIVAS
---------------------------------------------
Hay 3 tipos de directivas:
    - page directive
    - include directive
    - taglib directive


<%@ directiva atributo="valor" %>
<%@ directiva atributo1="valor1" atributo2="valor2" atributoN="valorN" %>

Atributos de una directiva:
    - import        The import attribute is used to import class,interface or all the members of a package.It is similar to import keyword in java class or interface.
    - contentType   The contentType attribute defines the MIME(Multipurpose Internet Mail Extension) type of the HTTP response.The default value is "text/html;charset=ISO-8859-1".
    - extends       The extends attribute defines the parent class that will be inherited by the generated servlet.It is rarely used.
    - info          This attribute simply sets the information of the JSP page which is retrieved later by using getServletInfo() method of Servlet interface.
    - buffer        The buffer attribute sets the buffer size in kilobytes to handle output generated by the JSP page.The default size of the buffer is 8Kb
    - language      The language attribute specifies the scripting language used in the JSP page. The default value is "java".
    - isELIgnored   We can ignore the Expression Language (EL) in jsp by the isELIgnored attribute. By default its value is false i.e. Expression Language is enabled by default.
    - isThreadSafe  Servlet and JSP both are multithreaded.If you want to control this behaviour of JSP page, you can use isThreadSafe attribute of page directive.The value of isThreadSafe value is true.If you make it false, the web container will serialize the multiple requests, i.e. it will wait until the JSP finishes responding to a request before passing another request to it
    - autoFlush
    - session
    - pageEncoding
    - errorPage     The errorPage attribute is used to define the error page, if exception occurs in the current page, it will be redirected to the error page. <%@ page errorPage="myerrorpage.jsp" %>
    - isErrorPage   The isErrorPage attribute is used to declare that the current page is the error page.


    - include -> permite incluir otro fichero que se tratará como JSP.El fichero se referencia con una URL relativa a la página JSP o al servidor si va precedido de /
    - page -> permite importar un paquete (<%@ page import="java.util.*" %>)
    - taglib -> The JSP taglib directive is used to define a tag library that defines many tags <%@ taglib uri="uriofthetaglibrary" prefix="prefixoftaglibrary" %> (Por ejemplo jstl)

---------------------------------------------
Uso de Java Beans con JSP (POJO's)
---------------------------------------------
Los Java Beans son componentes Java que se usan habitualmente en aplicaciones Web para gestionar la lógica de negocio.
Clases Java que cumplen varias convenciones
Declarados dentro de un paquete
Constructor sin argumentos, o que no se defina ningún constructor
Todos los atributos son private (stos atributos se denominan propiedades)
Métodos de acceso a las propiedades
    getPropiedad() para lectura isPropiedad para los booleanos (opcional)
    setPropiedad(valor) para escritura
Métodos para realizar funciones más complejas

    jsp:useBean.        Crea un Java Bean <jsp:useBean id="nombreBean" class="paquete.Clase"/> equivale a <%paquete.Clase nombreBean =new paquete.Clase(); %>
    jsp:setProperty     Modifica una propiedad llamando al método setPropiedad()
    jsp:getProperty     Obtiene el valor de una propiedad llamando a getPropiedad()

    <jsp:forward page="URL"/>                   Salta al URL (estático)
    <jsp:forward page="<%=expresiónJava %>"/>   Salta al URL resultante de la expresión Java (calculado dinámicamente)
